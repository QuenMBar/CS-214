Script started on Thu 18 Apr 2019 07:16:13 PM EDT
cat qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ cat NameTester.java
import java.util.Scanner;

/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Quentin Barnes
 * Date: April 18, 2019
 ************************************************************/

public class NameTester {
  public static void main(String[] args) {
    Name aName = new Name("John", "Paul", "Jones");
    //
    assert aName.getFirst().equals("John");
    assert aName.getMiddle().equals("Paul");
    assert aName.getLast().equals("Jones");
    //
    System.out.println(aName);
    assert aName.toString().equals("John Paul Jones");

    aName.setFirst("Marwan");
    aName.setMiddle("Peter");
    aName.setLast("Pierce");
    assert aName.toString().equals("Marwan Peter Pierce");
    assert aName.lfmi().equals("Pierce, Marwan P.");

    Scanner keyboard = new Scanner(System.in);
    aName.read(keyboard); // User Input Is Printed to verify correctness
    keyboard.close();

    System.out.println(aName);

    System.out.println("All tests passed!");
  }
}

class Name {
  private String myFirst, myMiddle, myLast;

  public Name(String first, String middle, String last) {
    myFirst = first;
    myMiddle = middle;
    myLast = last;
  }

  public String getFirst() {
    return myFirst;
  }

  public String getMiddle() {
    return myMiddle;
  }

  public String getLast() {
    return myLast;
  }

  public String toString() {
    return myFirst + ' ' + myMiddle + ' ' + myLast;
  }

  // Allows the user to set the value of the first name
  // Recives: A String
  public void setFirst(String aFirst) {
    myFirst = aFirst;
  }

  // Allows the user to set the value of the middle name
  // Recives: A String
  public void setMiddle(String aMiddle) {
    myMiddle = aMiddle;
  }

  // Allows the user to set the value of the last name
  // Recives: A String
  public void setLast(String aLast) {
    myLast = aLast;
  }

  // Returns the name in a specific format
  // Returns: A string
  public String lfmi() {
    return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + ".";
  }

  // Reads a name from the keyboard
  // Recives: A scanner
  public void read(Scanner keyboard) {
    System.out.print("Enter First Name: ");
    myFirst = keyboard.next();
    System.out.print("Enter Middle Name: ");
    myMiddle = keyboard.next();
    System.out.print("Enter Last Name: ");
    myLast = keyboard.next();
  }
};
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ make java
javac -deprecation NameTester.java
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ java NameTester. 
John Paul Jones
Enter First Name: James
Enter Middle Name: Jim
Enter Last Name: Jones
James Jim Jones
All tests passed!
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ exit
exit

Script done on Thu 18 Apr 2019 07:17:07 PM EDT
Script started on Thu 18 Apr 2019 07:17:13 PM EDT
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ cat name_tester.adb 
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: April 18, 2019
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  NAME_SIZE : Integer := 8;

type Name is
  record

    myFirst, myMiddle, myLast : String( 1..NAME_SIZE );

  end record;

  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  procedure Init(TheName: out Name; First, Middle, Last : in String) is

  begin
    TheName.MyFirst := First;
    TheName.MyMiddle := Middle;
    TheName.MyLast := Last;
  end Init;


  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  function getFirst(TheName : in Name) return String is
   begin
      return TheName.MyFirst;
   end getFirst;


  function getMiddle(TheName : in Name) return String is
   begin
      return TheName.MyMiddle;
   end getMiddle;


  function getLast(TheName : in Name) return String is
   begin
      return TheName.MyLast;
   end getLast;


  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  function getFullName(TheName : in Name) return String is
   begin
      return TheName.MyFirst & " " & TheName.myMiddle & " " & TheName.myLast;
   end getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

  procedure Put(TheName : in Name) is
    begin
      Put(getFullName(TheName));
  end Put;

  ----------------------------------------------
  -- setFirst(Name; String) sets Name.myFirst      -
  -- Receive: theName, a Name and aFirst, a String -
  -- PRE: theName has been initialized.            -
  -- Return: N/A                                   -
  ----------------------------------------------

  procedure setFirst(TheName : out Name; aFirst : in String) is
    begin 
      TheName.MyFirst := aFirst;
  end setFirst;

  procedure setMiddle(TheName : out Name; aMiddle : in String) is
    begin 
      TheName.MyMiddle := aMiddle;
  end setMiddle;

  procedure setLast(TheName : out Name; aLast : in String) is
    begin 
      TheName.MyLast := aLast;
  end setLast;

  -----------------------------------------------
  -- lfmi(Name) retrieves Name as a String in a format -
  -- Receive: theName, a Name.                         -
  -- PRE: theName has been initialized.                -
  -- Return: a String representation of theName        -
  -----------------------------------------------

  function lfmi(TheName : in Name) return String is
   begin
      return TheName.myLast & ", " & TheName.MyFirst & " " & TheName.myMiddle(TheName.myMiddle'First) & ".";
  end lfmi;

  -----------------------------------------------
  -- read(Name) sets Name based on user Input   -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: N/A                                -
  -----------------------------------------------

  procedure read(TheName : out Name) is
    aFirst, aMiddle, aLast : String( 1..NAME_SIZE );
    begin 
      Get(aFirst);
      Get(aMiddle);
      Get(aLast);

      theName.myFirst := aFirst;
      theName.myMiddle := aMiddle;
      theName.myLast := aLast;
  end read;

  aName : Name;

begin

  Init(aName, "John    ", "Paul    ", "Jones   ");

  pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
  pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
  pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
  pragma Assert( getFullName(aName) = "John     Paul     Jones   ", 
                  "getFullName() failed");

  Put(aName); New_line;

  setFirst(aName, "Marwan  ");
  setMiddle(aName, "Peter   ");
  setLast(aName, "Pierce  ");
  pragma Assert( getFullName(aName) = "Marwan   Peter    Pierce  ", 
                  "getFullName() failed");

  pragma Assert( lfmi(aName) = "Pierce  , Marwan   P.", 
                  "lfmi() failed");

  read(aName); -- User Input Is Printed to verify correctness

  Put(aName); New_line;

  Put("All tests passed!"); New_line;

end name_tester;

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ make ada
gnatmake name_tester -gnata
gcc-5 -c -gnata name_tester.adb
gnatbind-5 -x name_tester.ali
gnatlink-5 name_tester.ali
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ ./name_tester 
John     Paul     Jones   
James^[[D^[[D             James   
Keir th   
Urban   
James    Keith    Urban   
All tests passed!
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ exit
exit

Script done on Thu 18 Apr 2019 07:18:42 PM EDT
Script started on Thu 18 Apr 2019 07:19:55 PM EDT
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07/clojure$ cat src/nameTeester.clj 
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: April 18, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

(defrecord Name [ myFirst myMiddle myLast ] )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Name [ firstVal middleVal lastVal]
      (->Name firstVal middleVal lastVal)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getFirst [^Name aName]
  (:myFirst aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getMiddle [^Name aName]
  (:myMiddle aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getLast [^Name aName]
  (:myLast aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn toString [^Name aName]
  (str (:myFirst aName) " " (:myMiddle aName) " " (:myLast aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn printName [^Name aName]
  (print (toString aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() sets the first name of a Name object.
;;; Receive: aName, a Name and aFirst, a String.
;;; Return: a Name Object with the new first name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setFirst [^Name aName aFirst]
  (->Name aFirst (:myMiddle aName) (:myLast aName))
)

(defn setMiddle [^Name aName aMiddle]
  (->Name (:myFirst aName) aMiddle (:myLast aName))
)

(defn setLast [^Name aName aLast]
  (->Name (:myFirst aName) (:myMiddle aName) aLast)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi() returns a full name in l-f-mi order. 
;;; Receive: aName, a Name. 
;;; Return: lastName, firstName, middleName first char
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn lfmi [^Name aName]
  (str (:myLast aName) ", " (:myFirst aName) " " (subs (:myMiddle aName) 0 1) ".")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; read() sets a new Name from user input.
;;; Receive: aName, a Name.
;;; Return: a Name Object with the new Name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn read [^Name aName]
  (let
    [
      aFirst (read-line)
      aMiddle (read-line)
      aLast (read-line)
    ]
    (->Name aFirst aMiddle aLast)
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
     name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
     name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
     name3 (map->Name {:myLast "Jones" :myFirst "Jinx" :myMiddle "Joy"})
    ]
    ;; ----- SECTION 1 -----
   (println)
   (print name1) (println)
   (assert (= (getFirst name1) "John") "getFirst(1) failed")
   (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
   (assert (= (getLast name1) "Jones") "getLast(1) failed")
   (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
   (printName name1) (println)
    ;; ----- SECTION 2 -----
   (println)
   (print name2) (println)
   (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
   (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
   (assert (= (getLast name2) "Jones") "getLast(2) failed")
   (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
   (printName name2) (println)
    ;; ----- SECTION 3 -----
   (println)
   (print name3) (println)
   (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
   (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
   (assert (= (getLast name3) "Jones") "getLast(3) failed")
   (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
   (printName name3) (println)
  ;; ----- NEW TESTS -----
  (println)
  (let
      [
        name1 (setFirst name1 "Marwan")
        name1 (setMiddle name1 "Peter")
        name1 (setLast name1 "Pierce")
      ]
      (assert (= (toString name1) "Marwan Peter Pierce") "toString(1) failed")
      (assert (= (lfmi name1) "Pierce, Marwan P.") "lfmi(1) failed")
      ; (print (lfmi name1))

      (let
        [
          name1 (read name1) ;; User Input Is Printed to verify correctness
        ]
        (printName name1) (println)
      )
    )

    (println "\nAll tests passed!\n")
  )
)

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07/clojure$ clojure -m na meTester
WARNING: read already refers to: #'clojure.core/read in namespace: nameTester, being replaced by: #'nameTester/read

#nameTester.Name{:myFirst John, :myMiddle Paul, :myLast Jones}
John Paul Jones

#nameTester.Name{:myFirst Jane, :myMiddle Penelope, :myLast Jones}
Jane Penelope Jones

#nameTester.Name{:myFirst Jinx, :myMiddle Joy, :myLast Jones}
Jinx Joy Jones

James
Sall
Kevin
James Sall Kevin

All tests passed!

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07/clojure$ exit
exit

Script done on Thu 18 Apr 2019 07:21:18 PM EDT
Script started on Thu 18 Apr 2019 07:18:56 PM EDT
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ cat NameTester.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quenin Barnes
# Date: April 18, 2019
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name

    def initialize(first, middle, last)
        @first, @middle, @last = first, middle, last
    end

    #Allows user to modify variables
    attr_reader :first, :middle, :last
    attr_writer :first, :middle, :last

    def fullName
        @first + " " + @middle + " " + @last
    end

    def print
        puts self.fullName
        self.fullName
    end

    #Returns the name in a specific format 
    def lfmi
        @last + ", " + @first + " " + @middle[0,1] + "."
    end

    #Sets name based on user Inputs
    def read
        @first = gets
        @middle = gets
        @last = gets
        @first.delete!("\n") # Removes newline characters from the name
        @middle.delete!("\n")
        @last.delete!("\n")
    end

end

def testName
    name = Name.new("John", "Paul", "Jones")

    assert name.first == "John", "first failed"
    assert name.middle == "Paul", "middle failed"
    assert name.last == "Jones", "last failed"
    assert name.fullName == "John Paul Jones", "fullName failed"
    assert name.print == "John Paul Jones", "print failed"

    name.first = "Marwan"
    name.middle = "Peter"
    name.last = "Pierce"
    assert name.fullName == "Marwan Peter Pierce", "fullName failed"
    assert name.lfmi == "Pierce, Marwan P.", "lfmi failed"

    name.read     # User Input Is Printed to verify correctness

    name.print
   
   print "All tests passed!\n"
end

testName

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ ruby NameTester.rb
John Paul Jones
James
Keith  
RE evil
James Keith Revil
All tests passed!
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07$ exit
exit

Script done on Thu 18 Apr 2019 07:19:41 PM EDT
