Script started on Thu 18 Apr 2019 07:19:55 PM EDT
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07/clojure$ cat src/nameTeester.clj 
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: April 18, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

(defrecord Name [ myFirst myMiddle myLast ] )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Name [ firstVal middleVal lastVal]
      (->Name firstVal middleVal lastVal)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getFirst [^Name aName]
  (:myFirst aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getMiddle [^Name aName]
  (:myMiddle aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getLast [^Name aName]
  (:myLast aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn toString [^Name aName]
  (str (:myFirst aName) " " (:myMiddle aName) " " (:myLast aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn printName [^Name aName]
  (print (toString aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() sets the first name of a Name object.
;;; Receive: aName, a Name and aFirst, a String.
;;; Return: a Name Object with the new first name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setFirst [^Name aName aFirst]
  (->Name aFirst (:myMiddle aName) (:myLast aName))
)

(defn setMiddle [^Name aName aMiddle]
  (->Name (:myFirst aName) aMiddle (:myLast aName))
)

(defn setLast [^Name aName aLast]
  (->Name (:myFirst aName) (:myMiddle aName) aLast)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi() returns a full name in l-f-mi order. 
;;; Receive: aName, a Name. 
;;; Return: lastName, firstName, middleName first char
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn lfmi [^Name aName]
  (str (:myLast aName) ", " (:myFirst aName) " " (subs (:myMiddle aName) 0 1) ".")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; read() sets a new Name from user input.
;;; Receive: aName, a Name.
;;; Return: a Name Object with the new Name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn read [^Name aName]
  (let
    [
      aFirst (read-line)
      aMiddle (read-line)
      aLast (read-line)
    ]
    (->Name aFirst aMiddle aLast)
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
     name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
     name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
     name3 (map->Name {:myLast "Jones" :myFirst "Jinx" :myMiddle "Joy"})
    ]
    ;; ----- SECTION 1 -----
   (println)
   (print name1) (println)
   (assert (= (getFirst name1) "John") "getFirst(1) failed")
   (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
   (assert (= (getLast name1) "Jones") "getLast(1) failed")
   (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
   (printName name1) (println)
    ;; ----- SECTION 2 -----
   (println)
   (print name2) (println)
   (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
   (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
   (assert (= (getLast name2) "Jones") "getLast(2) failed")
   (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
   (printName name2) (println)
    ;; ----- SECTION 3 -----
   (println)
   (print name3) (println)
   (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
   (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
   (assert (= (getLast name3) "Jones") "getLast(3) failed")
   (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
   (printName name3) (println)
  ;; ----- NEW TESTS -----
  (println)
  (let
      [
        name1 (setFirst name1 "Marwan")
        name1 (setMiddle name1 "Peter")
        name1 (setLast name1 "Pierce")
      ]
      (assert (= (toString name1) "Marwan Peter Pierce") "toString(1) failed")
      (assert (= (lfmi name1) "Pierce, Marwan P.") "lfmi(1) failed")
      ; (print (lfmi name1))

      (let
        [
          name1 (read name1) ;; User Input Is Printed to verify correctness
        ]
        (printName name1) (println)
      )
    )

    (println "\nAll tests passed!\n")
  )
)

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07/clojure$ clojure -m na meTester
WARNING: read already refers to: #'clojure.core/read in namespace: nameTester, being replaced by: #'nameTester/read

#nameTester.Name{:myFirst John, :myMiddle Paul, :myLast Jones}
John Paul Jones

#nameTester.Name{:myFirst Jane, :myMiddle Penelope, :myLast Jones}
Jane Penelope Jones

#nameTester.Name{:myFirst Jinx, :myMiddle Joy, :myLast Jones}
Jinx Joy Jones

James
Sall
Kevin
James Sall Kevin

All tests passed!

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/07/clojure$ exit
exit

Script done on Thu 18 Apr 2019 07:21:18 PM EDT
