Script started on Mon 06 May 2019 11:25:01 PM EDT
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/java$ cat Find.java 

/* Find.java finds a value in Java linked lists.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 6, 2019
 */

import java.util.LinkedList;
import java.util.Iterator;

public class Find {

  public static void main(String[] args) {
    LinkedList<Integer> list1 = new LinkedList<Integer>();
    LinkedList<Integer> list2 = new LinkedList<Integer>();
    LinkedList<Integer> list3 = new LinkedList<Integer>();
    LinkedList<Integer> list4 = new LinkedList<Integer>();

    list1.add(99); // 99, 88, 77, 66, 55
    list1.add(88); // 99 is first
    list1.add(77);
    list1.add(66);
    list1.add(55);

    list2.add(55); // 55, 66, 77, 88, 99
    list2.add(66); // 99 is last
    list2.add(77);
    list2.add(88);
    list2.add(99);

    list3.add(55); // 55, 77, 99, 88, 66
    list3.add(77); // 99 is in the middle
    list3.add(99);
    list3.add(88);
    list3.add(66);

    list4.add(55); // 55, 77, 45, 88, 66
    list4.add(77); // 99 doesnt exist
    list4.add(45);
    list4.add(88);
    list4.add(66);

    print(list1);
    print(list2);
    print(list3);
    print(list4);

    System.out.println("list1: 99's position is: " + search(list1, 99));
    System.out.println("list2: 99's position is: " + search(list2, 99));
    System.out.println("list3: 99's position is: " + search(list3, 99));
    System.out.println("list4: 99's position is: " + search(list4, 99));
  }

  /**
   * print() displays a LinkedList on the console.
   *
   * @param: aList, a LinkedList<Integer>
   * 
   *                Postcondition: the Integer values in aList have been displayed
   *                to System.out, separated by spaces.
   */
  public static void print(LinkedList<Integer> aList) {
    Iterator<Integer> listIterator = aList.iterator();
    while (listIterator.hasNext()) {
      System.out.print(listIterator.next() + " ");
    }
    System.out.print('\n');
  }

  /**
   * search() finds the position of a value in a list.
   *
   * @param: aList, a LinkedList<Integer>. aValue, an Integer
   * @return: postion, an Integer
   */
  public static Integer search(LinkedList<Integer> aList, Integer aValue) {
    Iterator<Integer> listIterator = aList.iterator();
    Integer position = -1;
    Integer currentPosition = 0;
    while (listIterator.hasNext()) {
      if (listIterator.next().compareTo(aValue) == 0) {
        position = currentPosition;
      }
      currentPosition++;
    }
    return position;
  }

}
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/java$ make
javac -deprecation Find.java
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/java$ java f Find. 
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
55 77 45 88 66 
list1: 99's position is: 0
list2: 99's position is: 4
list3: 99's position is: 2
list4: 99's position is: -1
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/java$ exit

Script done on Mon 06 May 2019 11:26:23 PM EDT
Script started on Mon 06 May 2019 11:26:40 PM EDT
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ada$ cat find.adb 
-- find.adb finds the max of a list of integers. 
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 6, 2019
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure Find is 
                              -- define 3 lists 
  List1, List2, List3, List4 : List; 
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3); 
  Init(List4); 
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- 99 is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- 99 is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- 99 is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3); 

  Append(55, List4);          -- 55, 77, 99, 88, 66 
  Append(77, List4);          -- 99 is not in the list 
  Append(45, List4); 
  Append(88, List4); 
  Append(66, List4); 
 
  Put(List1); New_Line;       -- output the 4 lists 
  Put(List2); New_Line; 
  Put(list3); New_Line; 
  Put(list4); New_Line; 
                              -- search them 
  Put("The position of 99 in list 1 is ");  
  Put( Search(List1, 99) ); 
  New_Line; 
  Put("The position of 99 in list 2 is "); 
  Put( Search(List2, 99) );
  New_Line; 
  Put("The position of 99 in list 3 is ");
  Put( Search(List3, 99) );
  New_Line; 
  Put("The position of 99 in list 4 is ");
  Put( Search(List4, 99) );
  New_Line; 
 
end Find; 

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ada$ cat list_package.ads
-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 6, 2019
------------------------------------------------------------------

package List_Package is

  -- the list-type itself (public)
  type List is private;

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List: out List);


  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List: in List) return Boolean;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer;


  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List: in out List);


  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_List : in List);

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List : in List) return Integer;

  ------------------------------------------------
  -- Find the position of a value in a list.     -
  -- Receive: aList, a List. A_Value, a Integer  -
  -- Return: the position of a value in aList.   -
  ------------------------------------------------

  function Search(A_List : in List; A_Value : in Integer) return Integer;

 private

  type List_Node;

  type Node_Ptr is access List_Node;

  type List_Node is
          record
           Its_Value : Integer;
           Its_Next : Node_Ptr;
          end record;

  type List is 
      record
        Its_First : Node_Ptr;
        Its_Last : Node_Ptr;
        Its_Length : Integer;
      end record;

end List_Package;

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ada$ cat list_package.adb
-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 6, 2019
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_List : in List) is
     Temp_Ptr : Node_Ptr := A_List.Its_First;
   begin 
     while Temp_Ptr /= null loop
        Put(' '); Put(Temp_Ptr.Its_Value);
        Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
   end Put;

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List : in List) return Integer is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
    Max_Value : Integer := -99999;
  begin
    while Temp_Ptr /= null loop
        if Temp_Ptr.Its_Value > Max_Value then
          Max_Value := Temp_Ptr.Its_Value;
        end if;

        Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;

     return Max_Value;

  end Max;

  ------------------------------------------------
  -- Find the position of a value in a list.     -
  -- Receive: aList, a List. A_Value, a Integer  -
  -- Return: the position of a value in aList.   -
  ------------------------------------------------

  function Search(A_List : in List; A_Value : in Integer) return Integer is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
    Position : Integer := -1;
    CurrentPos : Integer := 0;
  begin
    while Temp_Ptr /= null loop
        if Temp_Ptr.Its_Value = A_Value then
          Position := CurrentPos;
        end if;
        CurrentPos := CurrentPos + 1;
        Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;

     return Position;
  end Search;

end List_Package;

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ada$ make
gcc -c -Wall find.adb
gcc -c -Wall list_package.adb
gnatbind  find.ali
gnatlink  find.ali -o adaFind
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ada$ ./adaFind 
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
          55          77          45          88          66
The position of 99 in list 1 is           0
The position of 99 in list 2 is           4
The position of 99 in list 3 is           2
The position of 99 in list 4 is          -1
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ada$ exit

Script done on Mon 06 May 2019 11:27:11 PM EDT
Script started on Mon 06 May 2019 11:29:38 PM EDT
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/clojure$ cat src/find.clj 
;; find.clj tests a function to search a list for a value.
;;
;; Output: four lists, and 
;;          the results of calling a listSearch() function on them.
;;
;; Usage: clojure -m find
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Quentin Barnes
;; Date: May 6, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns find)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listSearch(). 
;; Output: the results of testing listSearch() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; 99 is first value
      list2 (list 55 66 77 88 99)    ; 99 is last value
      list3 (list 55 77 99 88 66)    ; 99 is middle value
      list4 (list 55 77 45 88 66)    ; 99 doesnt exist
    ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "list4: " list4)        ;   list4,
    (println)                        ;   and their search
    (println "The position of 99 in list1 is: " (listSearch list1 99 0))
    (println "The position of 99 in list2 is: " (listSearch list2 99 0))
    (println "The position of 99 in list3 is: " (listSearch list3 99 0))
    (println "The position of 99 in list4 is: " (listSearch list4 99 0))
    (println)
  )
)

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/clojure$ cat src/listOps.clj 
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by: Quentin Barnes
;; Date: May 6, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn listMax [aList]
  (if (list? aList)
    (if (< (count aList) 1)
      nil
      (let
        [ firstVal (first aList)]
        (if (= (count aList) 1)
          firstVal
          (maxOf2 firstVal (listMax (rest aList)))
        )
      )
    )
    nil
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listSearch() finds the position of a value in a list.
;; Receive: aList, a list of values. aVal, an Integer to find. currentPos, an Integer
;; PRE: aList is a list 
;; Return: the position of a value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn listSearch [aList aVal currentPos]
  (if (list? aList)
    (if (< (count aList) 1)
      -1
      (let
        [ firstVal (first aList)]
        (if (= firstVal aVal)
          currentPos
          (listSearch (rest aList) aVal (+ currentPos 1))
        )
      )
    )
    nil
  )
)

;; using Clojure's built-in max and apply functions
(defn listMax2 [aList]
  (if (list? aList)       ; if aList is a list:
    (if (empty? aList)    ;  if aList is empty:
      nil                 ;    nil
      (apply max aList)   ;  else apply max to 
    )                     ;        the items in aList
  )
)
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/clojure$ make
clojure -m find

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
list4:  (55 77 45 88 66)

The position of 99 in list1 is:  0
The position of 99 in list2 is:  4
The position of 99 in list3 is:  2
The position of 99 in list4 is:  -1

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/clojure$ exit

Script done on Mon 06 May 2019 11:29:56 PM EDT
Script started on Mon 06 May 2019 11:30:10 PM EDT
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ruby$ cat find.rb 
# fin.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 6, 2019

require './List'

list1 = List.new
list2 = List.new
list3 = List.new
list4 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)
list4.append(55).append(77).append(45).append(88).append(66)

list1.print 
puts
puts "Position of 99 in list1: #{list1.search(99)}"

list2.print 
puts
puts "Position of 99 in list2: #{list2.search(99)}"

list3.print 
puts
puts "Position of 99 in list3: #{list3.search(99)}"

list4.print 
puts
puts "Position of 99 in list4: #{list4.search(99)}"

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ruby$ cat lis   List.rb 
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 6, 2019
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

   # Postcondition: first == nil and last == nil and length == 0

   def initialize()
         @first = nil
         @last = nil
         @length = 0
      end


   # create reader method for length
   attr_reader :length

   # Am I empty?
   # Return: length == 0
   def empty?
      @length == 0
   end
  
   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
   def append(value)
      newNode = Node.new(value, nil)

      if empty?
         @first = newNode
      else
         @last.next = newNode      
      end

      @last = newNode
      @length += 1
      self
   end


   # print my items
   # Postcondition: my items have been displayed to the screen

   def print
      temp = @first
      while !temp.nil?
         printf " #{temp.value}"
         temp = temp.next
      end
   end


   # find my maximum item
   # Return: my maximum item

   def max
      temp = @first
      maxValue = -99999
      while !temp.nil?
         if temp.value > maxValue
            maxValue = temp.value
         end
         temp = temp.next
      end
      return maxValue
   end

   # find an item
   # Return: position of item

   def search(aValue)
      temp = @first
      position = -1
      currentPos = 0
      while !temp.nil?
         if temp.value == aValue
            position = currentPos
         end
         currentPos = currentPos + 1
         temp = temp.next
      end
      return position
   end


   class Node 
      def initialize(item, link)
         @value = item
         @next = link
      end

      attr_reader :value
      attr_accessor :next
   end

end

qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ruby$ ruby find.rb 
 99 88 77 66 55
Position of 99 in list1: 0
 55 66 77 88 99
Position of 99 in list2: 4
 55 77 99 88 66
Position of 99 in list3: 2
 55 77 45 88 66
Position of 99 in list4: -1
qmb2@gold29:~/Desktop/GitStuff/Git 363/CS-214/projects/09/ruby$ exit

Script done on Mon 06 May 2019 11:30:40 PM EDT
