Script started on Wed 08 May 2019 04:52:51 PM EDT
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat Birds.java 
/* Birds.java illustrates inheritance and polymorphism.
 *
 * Begun by: Joel Adams, for CS 214 Lab 10 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 *********************************************************/

public class Birds {

  public static void main(String[] args) {
    System.out.println("\nWelcome to the Bird Park!\n");

    Bird bird0 = new Bird();

    Bird bird1 = new Bird("Hawkeye");
    bird1.print();

    Duck bird2 = new Duck("Donald");
    bird2.print();

    Goose bird3 = new Goose("Mother Goose");
    bird3.print();

    Owl bird4 = new Owl("Woodsey");
    bird4.print();

    Penguin bird5 = new Penguin("Peter");
    bird5.print();

    Ostrich bird6 = new Ostrich("Orville");
    bird6.print();

    Kiwi bird7 = new Kiwi("Kevin");
    bird7.print();
    System.out.println();
  }
}
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat Bird.java 

/* Bird.java provides a Bird class.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 ******************************************************/

import java.io.*;

public class Bird {

  /*
   * default constructor PostCond: myName == "".
   */

  public Bird() {
    myName = "";
  }

  /*
   * explicit constructor Receive: name, a String PostCond: myName == name.
   */

  public Bird(String name) {
    myName = name;
  }

  /*
   * Name accessor Return: myName.
   */

  public String getName() {
    return myName;
  }

  /*
   * A Bird's Call Return: a default bird-call ("Squawk!").
   */

  public String call() {
    return "Squaaaaaaaaaawk!";
  }

  /*
   * A Bird's Call Return: a default bird-movement ("came by").
   */

  public String getMovement() {
    return "came by";
  }

  /*
   * Output a Bird Output: Everything known about myself to the standard output
   * stream.
   */

  public void print() {
    System.out.println(getName() + ' ' + getClass().getName() + " just " + getMovement() + " and said " + call());
  }

  private String myName;
}
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat FlyingBird.jaava 
/* FlyingBird.java provides a FlyingBird subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 ******************************************************/

public class FlyingBird extends Bird {

    /*
     * explicit constructor Receive: name, a String PostCond: myName == name.
     */

    public FlyingBird() {
        super();
    }

    public FlyingBird(String name) {
        super(name);
    }

    /*
     * A FlyingBird's Call Return: a FlyingBird-movenent ("flew past!").
     */

    public String getMovement() {
        return "flew past";
    }

}qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat Duck.java 
/* Duck.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 ******************************************************/

public class Duck extends FlyingBird {

  /*
   * explicit constructor Receive: name, a String PostCond: myName == name.
   */

  public Duck() {
    super();
  }

  public Duck(String name) {
    super(name);
  }

  /*
   * A Duck's Call Return: a duck-call ("Quack!").
   */

  public String call() {
    return "Quack!";
  }

}
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat Goose.java 
/* Goose.java provides a Goose subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 ******************************************************/

public class Goose extends FlyingBird {

  /*
   * explicit constructor Receive: name, a String PostCond: myName == name.
   */
  public Goose() {
    super();
  }

  public Goose(String name) {
    super(name);
  }

  /*
   * A Goose's Call Return: a goose-call ("Honk!").
   */

  public String call() {
    return "Honk!";
  }

}
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat Owl.java 
/* Owl.java provides an Owl subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 ******************************************************/

public class Owl extends FlyingBird {

  /*
   * explicit constructor Receive: name, a String PostCond: myName == name.
   */

  public Owl() {
    super();
  }

  public Owl(String name) {
    super(name);
  }

  /*
   * An Owl's Call Return: an owl-call ("Whoo-hoo!").
   */

  public String call() {
    return "Whoo-hoo!";
  }

}
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat WalkingBird.jjava 
/* WalkingBird.java provides a WalkingBird subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 ******************************************************/

public class WalkingBird extends Bird {

    /*
     * explicit constructor Receive: name, a String PostCond: myName == name.
     */

    public WalkingBird() {
        super();
    }

    public WalkingBird(String name) {
        super(name);
    }

    /*
     * A WalkingBird's Call Return: a WalkingBird-call ("walked past!").
     */

    public String getMovement() {
        return "walked past";
    }

}qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat Penguin.java  
/* Penguin.java provides an Penguin subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 ******************************************************/

public class Penguin extends WalkingBird {

  /*
   * explicit constructor Receive: name, a String PostCond: myName == name.
   */

  public Penguin() {
    super();
  }

  public Penguin(String name) {
    super(name);
  }

  /*
   * An Penguin's Call Return: an Penguin-call ("Huh-huh-huh-huuuuh!").
   */

  public String call() {
    return "Huh-huh-huh-huuuuh!";
  }

}
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat Ostrich.java  
/* Ostrich.java provides a Ostrich subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 ******************************************************/

public class Ostrich extends WalkingBird {

  /*
   * explicit constructor Receive: name, a String PostCond: myName == name.
   */
  public Ostrich() {
    super();
  }

  public Ostrich(String name) {
    super(name);
  }

  /*
   * A Ostrich's Call Return: a Ostrich-call ("Snork!").
   */

  public String call() {
    return "Snork!";
  }

}
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ cat Kiwi.java 
/* Kiwi.java provides a Kiwi subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Quentin Barnes
 * Date: May 7, 2019
 ******************************************************/

public class Kiwi extends WalkingBird {

  /*
   * explicit constructor Receive: name, a String PostCond: myName == name.
   */

  public Kiwi() {
    super();
  }

  public Kiwi(String name) {
    super(name);
  }

  /*
   * A Kiwi's Call Return: a Kiwi-call ("Quack!").
   */

  public String call() {
    return "Screech!";
  }

}
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ make
javac -deprecation Birds.java
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ java Birds

Welcome to the Bird Park!

Hawkeye Bird just came by and said Squaaaaaaaaaawk!
Donald Duck just flew past and said Quack!
Mother Goose Goose just flew past and said Honk!
Woodsey Owl just flew past and said Whoo-hoo!
Peter Penguin just walked past and said Huh-huh-huh-huuuuh!
Orville Ostrich just walked past and said Snork!
Kevin Kiwi just walked past and said Screech!

qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/java$ exit

Script done on Wed 08 May 2019 04:54:32 PM EDT
Script started on Wed 08 May 2019 04:54:53 PM EDT
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat birds.adb 
-- birds.adb tests our Birds type hierarchy.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
-----------------------------------------------------

with Bird_Package, 
      FlyingBird_Package,
      WalkingBird_Package,
      Duck_Package, 
      Goose_Package,
      Owl_Package,
      Penguin_Package, 
      Ostrich_Package,
      Kiwi_Package,
      Ada.Text_IO;
use Bird_Package,
      FlyingBird_Package,
      WalkingBird_Package,
      Duck_Package, 
      Goose_Package,
      Owl_Package,
      Penguin_Package, 
      Ostrich_Package,
      Kiwi_Package,
      Ada.Text_IO;


procedure Birds is

 Bird1 : Bird_Type;       -- base class
 Bird2 : Duck_Type;       -- derived class 1
 Bird3 : Goose_Type;      -- derived class 2
 Bird4 : Owl_Type;        -- derived class 3
 Bird5 : Penguin_Type;        -- derived class 3
 Bird6 : Ostrich_Type;        -- derived class 3
 Bird7 : Kiwi_Type;        -- derived class 3

begin
   New_Line; Put("Welcome to the Bird Park!"); New_Line;
   Init(Bird1, "Tweety");
   Put(Bird1); New_Line;

   Init(Bird2, "Donald");
   Put(Bird2); New_Line;

   Init(Bird3, "Mother");
   Put(Bird3); New_Line;

   Init(Bird4, "Woodsy");
   Put(Bird4); New_Line;
   
   Init(Bird5, "Peters");
   Put(Bird5); New_Line;

   Init(Bird6, "Orvile");
   Put(Bird6); New_Line;

   Init(Bird7, "Kevins");
   Put(Bird7); New_Line;

 New_Line;
end Birds;

qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat bird_package.aads
-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

package Bird_Package is
    type Bird_Type is tagged private;

 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type whose My_Name = Name.       -
 ----------------------------------------------------

 procedure Init(A_Bird : out Bird_Type; Name : in String);

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
function  Name(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
function  Call(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- A Bird's Movement                               -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("come by").        -
 ----------------------------------------------------
function  Movement(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
function  Type_Name(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
procedure Put(A_Bird : in Bird_Type'Class);

private
    type Bird_Type is
        tagged record
            My_Name : String(1..6);
        end record;

end Bird_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat bird_package.aads b
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type in which My_Name = Name.    -
 ----------------------------------------------------

 procedure Init(A_Bird : out Bird_Type; Name : in String) is
   begin
    A_Bird.My_Name := Name;
   end Init;

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------

 function Name(A_Bird : in Bird_Type) return String is
   begin
    return A_Bird.My_Name;
   end Name;

 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
function Call(A_Bird : in Bird_Type) return String is
   begin
    return "Squawwwwwwk!";
   end Call;

 ----------------------------------------------------
 -- A Bird's Movement                               -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("come by").        -
 ----------------------------------------------------
function Movement(A_Bird : in Bird_Type) return String is
   begin
    return "came by";
   end Movement;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
 function Type_Name(A_Bird : in Bird_Type) return String is
   begin
    return "Bird";
   end Type_Name;

 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
 procedure Put(A_Bird : in Bird_Type'Class) is
   begin
    Put( Name(A_Bird) );
    Put( ' ' );
    Put( Type_Name(A_Bird) );
    Put( " just " );
    Put( Movement(A_Bird) );
    Put( " and said " );
    Put( Call(A_Bird) );
   end Put; 

end Bird_Package;

qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat flyingbird_pacckage.ads
-- FlyingBird_package.ads gives FlyingBird-related declarations,
--
--  and derives FlyingBird from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with Bird_Package; use Bird_Package;

package FlyingBird_Package is

    type FlyingBird_Type is new Bird_Type with private;

    function Movement(A_FlyingBird : in FlyingBird_Type) return String;

private
    type FlyingBird_Type is new Bird_Type with
        record
            null;
        end record;
end FlyingBird_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat flyingbird_pacckage.ads b
-- FlyingBird_package.adb gives FlyingBird-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body FlyingBird_Package is

function Movement(A_FlyingBird : in FlyingBird_Type) return String is
   begin
    return "flew past";
   end Movement;

end FlyingBird_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat D duck_package.aads
-- duck_package.ads gives Duck-related declarations,
--
--  and derives Duck from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with FlyingBird_Package; use FlyingBird_Package;

package Duck_Package is

    type Duck_Type is new FlyingBird_Type with private;
 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
function  Call(A_Duck : in Duck_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
function  Type_Name(A_Duck : in Duck_Type) return String;

private
    type Duck_Type is new FlyingBird_Type with
        record
            null;
        end record;
end Duck_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat duck_package.aads b
-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
function Call(A_Duck : in Duck_Type) return String is
   begin
    return "Quack!";
   end Call;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
function Type_Name(A_Duck : in Duck_Type) return String is
   begin
    return "Duck";
   end Type_Name;

end Duck_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat goose_package..ads
-- goose_package.ads gives Goose-related declarations,
--
--  and derives Goose from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with FlyingBird_Package; use FlyingBird_Package;

package Goose_Package is

 type Goose_Type is new FlyingBird_Type with private;


 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose.                      -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------
function  Call(A_Goose : in Goose_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose.                       -
 -- Return: "Goose".                                 -
 -----------------------------------------------------
function  Type_Name(A_Goose : in Goose_Type) return String;

private
    type Goose_Type is new FlyingBird_Type with
        record
            null;
        end record;

end Goose_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat goose_package..ads b
-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

package body Goose_Package is

 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose_Type.                 -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------
function Call(A_Goose : in Goose_Type) return String is
    begin
     return "Honk!";
    end Call;



 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose_Type.                  -
 -- Return: "Goose".                                 -
 -----------------------------------------------------
function Type_Name(A_Goose : in Goose_Type) return String is
    begin
     return "Goose";
    end Type_Name;

end Goose_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat O owl_package.adds
-- owl_package.ads gives Owl-related declarations,
--  and derives Owl from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with FlyingBird_Package; use FlyingBird_Package;

package Owl_Package is

    type Owl_Type is new FlyingBird_Type with private;

 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
function  Call(A_Owl : in Owl_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------
function  Type_Name(A_Owl : in Owl_Type) return String;

private
    type Owl_Type is new FlyingBird_Type with
        record
            null;
        end record;

end Owl_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat owl_package.adds b
-- owl_package.adb gives Owl-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

package body Owl_Package is


 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
function Call(A_Owl : in Owl_Type) return String is
    begin
     return "Whoo-hoo!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------
 function Type_Name(A_Owl : in Owl_Type) return String is
    begin
     return "Owl";
    end Type_Name;

end Owl_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat walkingbird_paackage.ads
-- WalkingBird_Package.ads gives WalkingBird-related declarations,
--
--  and derives WalkingBird from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with Bird_Package; use Bird_Package;

package WalkingBird_Package is

    type WalkingBird_Type is new Bird_Type with private;

    function Movement(A_WalkingBird : in WalkingBird_Type) return String;

private
    type WalkingBird_Type is new Bird_Type with
        record
            null;
        end record;
end WalkingBird_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat walkingbird_paackage.ads b
-- WalkingBird_package.adb gives WalkingBird-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body WalkingBird_Package is

function Movement(A_WalkingBird : in WalkingBird_Type) return String is
   begin
    return "walked past";
   end Movement;

end WalkingBird_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat ostrich_packagge.ads
-- ostrich_package.ads gives Ostrich-related declarations,
--  and derives Ostrich from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with WalkingBird_Package; use WalkingBird_Package;

package Ostrich_Package is

    type Ostrich_Type is new WalkingBird_Type with private;

 ----------------------------------------------------
 -- A Ostrich's Call (Over-rides Bird.Call())           -
 -- Receive: An_Ostrich, an Ostrich_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
function  Call(A_Ostrich : in Ostrich_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Ostrich                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Ostrich, an Ostrich_Type.                    -
 -- Return: "Ostrich".                                   -
 -----------------------------------------------------
function  Type_Name(A_Ostrich : in Ostrich_Type) return String;

private
    type Ostrich_Type is new WalkingBird_Type with
        record
            null;
        end record;

end Ostrich_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat ostrich_packagge.ads b
-- ostrich_package.adb gives Ostrich-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

package body Ostrich_Package is


 ----------------------------------------------------
 -- A Ostrich's Call (Over-rides Bird.Call())           -
 -- Receive: An_Ostrich, an Ostrich_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
function Call(A_Ostrich : in Ostrich_Type) return String is
    begin
     return "Snork!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Ostrich                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Ostrich, an Ostrich_Type.                    -
 -- Return: "Ostrich".                                   -
 -----------------------------------------------------
 function Type_Name(A_Ostrich : in Ostrich_Type) return String is
    begin
     return "Ostrich";
    end Type_Name;

end Ostrich_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat penguin_packagge.ads
-- penguin_package.ads gives Penguin-related declarations,
--  and derives Penguin from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with WalkingBird_Package; use WalkingBird_Package;

package Penguin_Package is

    type Penguin_Type is new WalkingBird_Type with private;

 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())           -
 -- Receive: An_Penguin, an Penguin_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
function  Call(A_Penguin : in Penguin_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Penguin                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Penguin, an Penguin_Type.                    -
 -- Return: "Penguin".                                   -
 -----------------------------------------------------
function  Type_Name(A_Penguin : in Penguin_Type) return String;

private
    type Penguin_Type is new WalkingBird_Type with
        record
            null;
        end record;

end Penguin_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat penguin_packagge.ads b
-- penguin_package.adb gives Penguin-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

package body Penguin_Package is


 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())           -
 -- Receive: An_Penguin, an Penguin_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
function Call(A_Penguin : in Penguin_Type) return String is
    begin
     return "Huh-huh-huh-huuuuh!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Penguin                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Penguin, an Penguin_Type.                    -
 -- Return: "Penguin".                                   -
 -----------------------------------------------------
 function Type_Name(A_Penguin : in Penguin_Type) return String is
    begin
     return "Penguin";
    end Type_Name;

end Penguin_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat kiwi_package.aads
-- kiwi_package.ads gives Kiwi-related declarations,
--  and derives Kiwi from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

with WalkingBird_Package; use WalkingBird_Package;

package Kiwi_Package is

    type Kiwi_Type is new WalkingBird_Type with private;

 ----------------------------------------------------
 -- A Kiwi's Call (Over-rides Bird.Call())           -
 -- Receive: An_Kiwi, an Kiwi_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
function  Call(A_Kiwi : in Kiwi_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Kiwi                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Kiwi, an Kiwi_Type.                    -
 -- Return: "Kiwi".                                   -
 -----------------------------------------------------
function  Type_Name(A_Kiwi : in Kiwi_Type) return String;

private
    type Kiwi_Type is new WalkingBird_Type with
        record
            null;
        end record;

end Kiwi_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ cat kiwi_package.aads b
-- kiwi_package.adb gives Kiwi-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Quentin Barnes
-- Date: May 7, 2019
---------------------------------------------------

package body Kiwi_Package is


 ----------------------------------------------------
 -- A Kiwi's Call (Over-rides Bird.Call())           -
 -- Receive: An_Kiwi, an Kiwi_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
function Call(A_Kiwi : in Kiwi_Type) return String is
    begin
     return "Screech!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Kiwi                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Kiwi, an Kiwi_Type.                    -
 -- Return: "Kiwi".                                   -
 -----------------------------------------------------
 function Type_Name(A_Kiwi : in Kiwi_Type) return String is
    begin
     return "Kiwi";
    end Type_Name;

end Kiwi_Package;
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ make
gcc -c  birds.adb
gcc -c  bird_package.adb
gcc -c  flyingbird_package.adb
gcc -c  walkingbird_package.adb
gcc -c  duck_package.adb
gcc -c  goose_package.adb
gcc -c  owl_package.adb
gcc -c  penguin_package.adb
gcc -c  ostrich_package.adb
gcc -c  kiwi_package.adb
gnatbind birds.ali
gnatlink birds.ali
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ ./birds 

Welcome to the Bird Park!
Tweety Bird just came by and said Squawwwwwwk!
Donald Duck just flew past and said Quack!
Mother Goose just flew past and said Honk!
Woodsy Owl just flew past and said Whoo-hoo!
Peters Penguin just walked past and said Huh-huh-huh-huuuuh!
Orvile Ostrich just walked past and said Snork!
Kevins Kiwi just walked past and said Screech!

qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ada$ exit

Script done on Wed 08 May 2019 04:56:41 PM EDT
Script started on Wed 08 May 2019 04:57:07 PM EDT
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ cat src/birds..clj 
;; birds.clj illustrates inheritance and polymorphism in Clojure.
;;
;; Output: the results of testing the Bird functions.
;;
;; Usage: clojure -m birds
;;
;; Begun by: Prof. Adams, for CS 214 Lab 10 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: May 7, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns birds
  (:require
    [Bird]
    [Duck]
    [Goose]
    [Owl]
    [Penguin]
    [Ostrich]
    [Kiwi]
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function -main tests the classes in the Bird hierarchy.
;;; Output: the results of testing the Bird functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                              ;; Birds
     bird0 (make-Bird)            ; default Bird constructor
     bird1 (make-Bird "Hawkeye")  ; explicit Bird constructor
                                   ;; Ducks
     bird2 (make-Duck)            ; default Duck constructor
     bird3 (make-Duck  "Donald")  ; explicit Duck constructor
                                   ;; Geese
     bird4 (make-Goose)           ; default Goose constructor
     bird5 (make-Goose "Mother")  ; explicit Goose constructor
                                   ;; Owls
     bird6 (make-Owl)             ; default Owl constructor
     bird7 (make-Owl "Woodsey")   ; explicit Owl constructor

     bird8 (make-Ostrich)             ; default Owl constructor
     bird9 (make-Ostrich "Orville")   ; explicit Owl constructor

     bird10 (make-Kiwi)             ; default Owl constructor
     bird11 (make-Kiwi "Kevin")   ; explicit Owl constructor

     bird12 (make-Penguin)             ; default Owl constructor
     bird13 (make-Penguin "Peter")   ; explicit Owl constructor
    ]

    (println "\nWelcome to the Bird Park!\n")
    (println (toString bird0))
    (println (toString bird1))
    (println)
    (println (toString bird2))
    (println (toString bird3))
    (println)
    (println (toString bird4))
    (println (toString bird5))
    (println)
    (println (toString bird6))
    (println (toString bird7))
    (println)
    (println (toString bird8))
    (println (toString bird9))
    (println)
    (println (toString bird10))
    (println (toString bird11))
    (println)
    (println (toString bird12))
    (println (toString bird13))
    (println)
    (println "Goodbye, and come again!\n")
    (println)
  )
)
 
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ cat src/Bird.cclj 
;;;; Bird.clj provides a Bird "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: May 7, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Define a Bird 'class' with one attribute, the Bird's name.
;(defrecord Bird [name])
(defrecord Bird [name movement])

;;; Bird constructors
;;; - default: no args
;;;   Postcondition: name == a default value.
;;; - explicit:
;;;   Receive: itsName, a String.
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Bird
  ([]        (->Bird "Ann Onymous" "came by"))
  ([itsName] (->Bird itsName "came by"))
)


;;; accessor method for name attribute
;;; Receive: this, a Bird object.
;;; Return: this's name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getName [^Bird this]
  (:name this)
)

(defn getMovement [^Bird this]
  (:movement this)
)


;; define getClass, getCall, and toString as polymorphic methods
;; Note: these must be defined using defmethod instead of defn.

(defmulti getClass class)
(defmulti getCall  class)
(defmulti toString class)


;;; method to retrieve a Bird's class
;;; Receive: this, a Bird object.
;;; Return: "Bird".
;;; Note: 'subclasses' of Bird must define this method.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Bird [ _ ]
  "Bird"
)


;;; method to retrieve a Bird's call
;;; Receive: this, a Bird object.
;;; Return: a default bird-call.
;;; Note: 'subclasses' of Bird must define this method.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod  getCall :default [ _ ]
   "Squaaaaawk!"
)


;;; method to combine a Bird, its class and its call into a String.
;;; Receive: this, a Bird object.
;;; Return: a String representing this, its class, and its call.
;;; Note: getClass and getCall are polymorphic methods.
;;; Note also: the use of :default for its class means that
;;;        'subclasses' may but are not required to define it.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod toString :default [aBird]
  (str (getName aBird) " " (getClass aBird) " just " (getMovement aBird) " and said, \"" (getCall aBird) "\"")
)
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ cat src/d Duck.cclj 
;;;; Duck.clj provides a Duck "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: May 7, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as superclass) 
(load "Bird")

;; define 'Duck' as 'subclass' of Bird
(defrecord Duck [^Bird name movement] )

;;; constructors
;;; - default: takes no arguments
;;;   Postcondition: name is initialized to a default value
;;; - explicit: takes one parameter
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Duck
  ([]                (->Duck "Ann Onymous" "flew past"))
  ([^String itsName] (->Duck itsName "flew past"))
)

;;; method to retrieve a Duck's class
;;; Receive: this, a Duck object.
;;; Return: "Duck"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getClass Duck [ _ ]
  "Duck"
)

;;; method to retrieve a Duck's call
;;; Receive: this, a Duck object.
;;; Return: "Quack!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmethod getCall Duck [ _ ]
  "Quack!"
)qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ cat src/Owl.cllj 
;;;; Owl.clj provides an Owl "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: May 7, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 

;; bring in 'Bird' (to be used as 'superclass')

(load "Bird")


;; define 'Owl' as 'subclass' of Bird

(defrecord Owl [^Bird name movement] )


;;; Owl constructors
;;; - default: no args
;;;   Postcondition: name == a default value. 
;;; - explicit1:
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Owl     
  ([]                (->Owl "Ann Onymous" "flew past"))
  ([^String itsName] (->Owl itsName "flew past"))
)


;;; method to retrieve a Owl's class
;;; Receive: this, a Owl object.
;;; Return: "Owl".
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Owl [ _ ]
  "Owl"
)

;;; method to retrieve a Owl's call
;;; Receive: this, a Owl object.
;;; Return: "Whoo-hoo!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getCall Owl [ _ ]
  "Whoo-hoo!"
)


qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ cat src/Goose..clj 
;;;; Goose.clj provides a Goose "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: May 7, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; bring in 'Bird' (to be used as 'superclass')

(load "Bird")


;; define 'Goose' as 'subclass' of Bird

(defrecord Goose [^Bird name movement] )


;;; Goose constructors
;;; - default: no args
;;;   Postcondition: name == a default value. 
;;; - explicit1:
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Goose     
  ([]                (->Goose "Ann Onymous" "flew past"))
  ([^String itsName] (->Goose itsName "flew past"))
)


;;; method to retrieve a Goose's class
;;; Receive: this, a Goose object.
;;; Return: "Goose".
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Goose [ _ ]
  "Goose"
)

;;; method to retrieve a Goose's call
;;; Receive: this, a Goose object.
;;; Return: "Honk!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getCall Goose [ _ ]
  "Honk!"
)

qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ cat src  /Ostricch.clj 
;;;; Ostrich.clj provides an Ostrich "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: May 7, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 

;; bring in 'Bird' (to be used as 'superclass')

(load "Bird")


;; define 'Ostrich' as 'subclass' of Bird

(defrecord Ostrich [^Bird name movement] )


;;; Ostrich constructors
;;; - default: no args
;;;   Postcondition: name == a default value. 
;;; - explicit1:
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Ostrich     
  ([]                (->Ostrich "Ann Onymous" "walked past"))
  ([^String itsName] (->Ostrich itsName "walked past"))
)


;;; method to retrieve a Ostrich's class
;;; Receive: this, a Ostrich object.
;;; Return: "Ostrich".
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Ostrich [ _ ]
  "Ostrich"
)

;;; method to retrieve a Ostrich's call
;;; Receive: this, a Ostrich object.
;;; Return: "Whoo-hoo!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getCall Ostrich [ _ ]
  "Snork!"
)

qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ cat src/Penguiin.clj 
;;;; Penguin.clj provides an Penguin "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: May 7, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 

;; bring in 'Bird' (to be used as 'superclass')

(load "Bird")


;; define 'Penguin' as 'subclass' of Bird

(defrecord Penguin [^Bird name movement] )


;;; Penguin constructors
;;; - default: no args
;;;   Postcondition: name == a default value. 
;;; - explicit1:
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Penguin     
  ([]                (->Penguin "Ann Onymous" "walked past"))
  ([^String itsName] (->Penguin itsName "walked past"))
)


;;; method to retrieve a Penguin's class
;;; Receive: this, a Penguin object.
;;; Return: "Penguin".
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Penguin [ _ ]
  "Penguin"
)

;;; method to retrieve a Penguin's call
;;; Receive: this, a Penguin object.
;;; Return: "Whoo-hoo!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getCall Penguin [ _ ]
  "Huh-huh-huh-huuuuh!"
)


qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ cat src  /Kiwi.cclj 
;;;; Kiwi.clj provides an Kiwi "class".
;;;; 
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Quentin Barnes
;;;; Date: May 7, 2019
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 

;; bring in 'Bird' (to be used as 'superclass')

(load "Bird")


;; define 'Kiwi' as 'subclass' of Bird

(defrecord Kiwi [^Bird name movement] )


;;; Kiwi constructors
;;; - default: no args
;;;   Postcondition: name == a default value. 
;;; - explicit1:
;;;   Receive: itsName, a String
;;;   Postcondition: name == itsName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Kiwi     
  ([]                (->Kiwi "Ann Onymous" "walked past"))
  ([^String itsName] (->Kiwi itsName "walked past"))
)


;;; method to retrieve a Kiwi's class
;;; Receive: this, a Kiwi object.
;;; Return: "Kiwi".
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getClass Kiwi [ _ ]
  "Kiwi"
)

;;; method to retrieve a Kiwi's call
;;; Receive: this, a Kiwi object.
;;; Return: "Whoo-hoo!"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod getCall Kiwi [ _ ]
  "Screech!"
)

qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ make
clojure -m birds

Welcome to the Bird Park!

Ann Onymous Bird just came by and said, "Squaaaaawk!"
Hawkeye Bird just came by and said, "Squaaaaawk!"

Ann Onymous Duck just flew past and said, "Quack!"
Donald Duck just flew past and said, "Quack!"

Ann Onymous Goose just flew past and said, "Honk!"
Mother Goose just flew past and said, "Honk!"

Ann Onymous Owl just flew past and said, "Whoo-hoo!"
Woodsey Owl just flew past and said, "Whoo-hoo!"

Ann Onymous Ostrich just walked past and said, "Snork!"
Orville Ostrich just walked past and said, "Snork!"

Ann Onymous Kiwi just walked past and said, "Screech!"
Kevin Kiwi just walked past and said, "Screech!"

Ann Onymous Penguin just walked past and said, "Huh-huh-huh-huuuuh!"
Peter Penguin just walked past and said, "Huh-huh-huh-huuuuh!"

Goodbye, and come again!


qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/clojure$ exit

Script done on Wed 08 May 2019 04:58:14 PM EDT
Script started on Wed 08 May 2019 04:58:25 PM EDT
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ cat Birds.rb 
# birds.rb | Tests out the menagerie of bird classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
######################################################

require './Bird.rb'
require './Duck.rb'
require './Goose.rb'
require './Owl.rb'
require './Ostrich.rb'
require './Penguin.rb'
require './Kiwi.rb'

puts "\nWelcome to the Bird Park!\n\n"

bird0 = Bird.new "Hawkeye"
bird0.print

bird1 = Duck.new "Donald"
bird1.print

bird2 = Goose.new "Mother"
bird2.print

bird3 = Owl.new "Woodsey"
bird3.print

bird4 = Ostrich.new "Orville"
bird4.print

bird5 = Penguin.new "Peter"
bird5.print

bird6 = Kiwi.new "Kevin"
bird6.print

puts "\n\n"qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ car t Bird/ ,.  .rb 
# Bird.rb | Defines a Bird superclass 
#   to be extended by specific bird sub-classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
####################################################

class Bird

  attr_reader :name

  def initialize(name)
    @name = name
  end

  def call
    'Squaaaaaaawk!'
  end

  def movement
    'came by'
  end

  def className
    self.class.to_s
  end

  def print
    puts name + " " + className + " just " + movement + " and said " + call
  end
  
end
qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ cat FlyingBird.rbb 
# FlyingBird.rb | Defines the FlyingBird class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
####################################################

require './Bird.rb'

class FlyingBird < Bird

    def movement
        'flew past'
    end

endqmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ cat Duck.rb 
# Duck.rb | Defines the Duck class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
####################################################

require './FlyingBird.rb'

class Duck < FlyingBird

    def call
        'Quack!'
    end

endqmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ cat Goose.rb 
# Goose.rb | Defines the Goose class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
####################################################

require './FlyingBird.rb'

class Goose < FlyingBird

    def call
        'Honk!'
    end

endqmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ cat Owl.rb 
# Owl.rb | Defines the Owl class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
####################################################

require './FlyingBird.rb'

class Owl < FlyingBird

    def call
        'Whoo-hoo!'
    end

endqmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ cat w WalkingBird.rrb 
# WalkingBird.rb | Defines the WalkingBird class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
####################################################

require './Bird.rb'

class WalkingBird < Bird

    def movement
        'walked past'
    end

endqmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ cat Ostrich.rb 
# Ostrich.rb | Defines the Ostrich class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
####################################################

require './WalkingBird.rb'

class Ostrich < WalkingBird

    def call
        'Snork!'
    end

endqmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ cat Penguin.rb 
# Penguin.rb | Defines the Penguin class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
####################################################

require './WalkingBird.rb'

class Penguin < WalkingBird

    def call
        'Huh-huh-huh-huuuuh!'
    end

endqmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ cat Kiwi.rb 
# Kiwi.rb | Defines the Kiwi class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Quentin Barnes
# Date: May 07, 2019
####################################################

require './WalkingBird.rb'

class Kiwi < WalkingBird

    def call
        'Screech!'
    end

endqmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ ruby Birds.rb 

Welcome to the Bird Park!

Hawkeye Bird just came by and said Squaaaaaaawk!
Donald Duck just flew past and said Quack!
Mother Goose just flew past and said Honk!
Woodsey Owl just flew past and said Whoo-hoo!
Orville Ostrich just walked past and said Snork!
Peter Penguin just walked past and said Huh-huh-huh-huuuuh!
Kevin Kiwi just walked past and said Screech!


qmb2@gold22:~/Desktop/GitStuff/Git 363/CS-214/projects/10/ruby$ exit

Script done on Wed 08 May 2019 04:59:26 PM EDT
